---
title: "Archiving analysis"
author: "Tim Taylor"
date: 2022-09-07
format:
    revealjs
---

## Rough outline

- About me
- Caveats and disclaimers
- Goals of archiving analysis
- A simple abstraction of an analysis workflow
- An example
- Containers, source control and workflow management
- Questions

::: {.notes}
- Talk will be relatively brief.
- Goal is to stimulate discussion rather than dictate how things should be!
:::

## About me

- 2021 - now : Infectious Disease Modeller, UKHSA.
- 2020 - 2021: Research Fellow, LSHTM.
- 2015 - 2019: Operational Research Analyst, DfT.
- 2010 - 2013: PhD, Mathematics/Informatics.

::: {.notes}
- Title versus reality is a little different.
:::

## About me (in practice)

::: {.incremental}
- work as a [Research Software Engineer](https://society-rse.org/what-is-an-rse/)
(RSE).
- In <span style="color:red">collaboration</span> with
<span style="color:red">domain experts</span> I write software to help improve
the analysis that they can deliver.
:::

::: {.notes}
- Link goes to a description of what an RSE is.
- Stepping out of my lane with this talk.
:::

## Some caveats on what follows
    
::: {.incremental}
- All analyses are different.
- Simplistic example.
- Data access issues are ignored.
- Nothing new to UKHSA.
- Teams not individuals.
- There are no magic answers!
:::

::: {.notes}
- No single solution will work for everything.
- Example to illustrate abstractions
- Variations on this approach likely already adopted by teams within UKHSA.
- Do not expect individuals to be able to do everything. IMO - the trend towards
  wanting individuals who can do everything is not desirable. Better to allow
  people to specialise than do everything. Why I prefer the concept of 
  data science teams as opposed to data scientists.
:::
---

## What do we want to achieve?
We want ensure that it is easy for ourselves and others to:

::: {.incremental}
- <span style="color:red">build upon</span> the methods used;
- <span style="color:red">reproduce</span> and <span style="color:red">validate</span> our results;
- <span style="color:red">update</span> our output based on new input; and
- <span style="color:red">correct</span> any mistakes we have made.
:::

::: {.notes}
- sure there are many more points...
:::

## A (simple) abstraction 

```{mermaid}
flowchart LR
  A[Data] --> C{Run}
  B[Analysis code] --> C{Run}
  C{Run} --> D(Results)
  D[Results] --> F{Build}
  E[Report text] --> F{Build}
  F{Build} --> G(Report)
  style C fill:#b3f5a9
  style F fill:#b3f5a9
```

::: {.notes}
Questions

- How to orchestrate the flow?
- How to keep track of changes?
- How to generate the different outputs?
- How to store all of the different components?
- replace Run/Build with container

:::

# Example

A [mock technical briefing](https://timtaylor.github.io/demo-monkeypox/) for monkeypox.

::: {.notes}
- show report and click through to repository.
:::

## Implementation

- Coordinated via [Make](https://www.gnu.org/software/make/).
- [Containers](https://en.wikipedia.org/wiki/OS-level_virtualization), managed
  via [podman](https://docs.podman.io/en/latest/), are used for the analysis
  runtime and generation of report output.
- [Git](https://git-scm.com/) used for version control.
- [Container](https://github.com/TimTaylor/demo-monkeypox/pkgs/container/monkeypox/35977654?tag=latest),
  [source](https://github.com/TimTaylor/demo-monkeypox) and
  [output](https://timtaylor.github.io/demo-monkeypox/) all hosted using GitHub
  services.

::: {.notes}
TODO - talk about make, containers and git
- clone repo
- explain containers, a lightweight (relative to full vm) way to provision a runtime
  for our code. mention podman / docker and singularity
- pull container (explain this depends on your connection so may be slow etc)
- Make coordinates the different stages.
- Show makefile and explain target, dependencies
- run `make report` on the current repo.
- show benefit of version control - checkout v1.0 and rerun `make report` 
- go back to main
:::


## Useful links

- [minimal make](https://kbroman.org/minimal_make/)
- [Rocker Project](https://rocker-project.org/)
- [Happy Git](https://happygitwithr.com/)
- [A data analytic language](https://journal.r-project.org/articles/RJ-2021-111/)

# Questions?
